<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLR Calendrier des Matches</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <!-- Font Awesome -->

    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Arial', sans-serif;
        }
        h1 {
            text-align: center;
            margin-top: 20px;
            color: #343a40;
        }
        table {
            margin: 20px auto;
            width: 80%;
            border-collapse: collapse;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        th {
            background-color: #007bff;
            color: white;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .icon {
            margin-right: 10px;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .fade-in {
            animation: fadeIn 1s ease-in-out;
        }
        .grayed-out {
            background-color: #f1f1f1;
            color: #888;
        }
        .filter-container {
            margin-bottom: 20px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><img src="blr_rose.jpg" alt="BLR rose" width="50" > BLR Calendrier des Matches</h1>
        <div class="filter-container">
            <label for="team-filter">Filtrer par équipe :</label>
            <select id="team-filter" class="form-control">
                <option value="">Toutes les équipes</option>
                <!-- Options seront générées dynamiquement -->
            </select>
            <label for="date-filter">Filtrer par date :</label>
            <select id="date-filter" class="form-control">
                <option value="">Toutes les dates</option>
                <!-- Options seront générées dynamiquement -->
            </select>
        </div>
        <table id="matches-table" class="table table-bordered table-hover fade-in">
            <thead>
                <tr>
                    <th>Équipe</th>
                    <th>Adversaire</th>
                    <th>Date du Match</th>
                    <th>Heure</th>
                    <th>Lieu</th>
                    <th>Résultat</th>
                </tr>
            </thead>
            <tbody>
                <!-- Les matchs seront insérés ici -->
            </tbody>
        </table>
    </div>

    <!-- Bootstrap JS et dépendances -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        let allMatches = []; // Stocker tous les matchs
        const teamFilterSelect = document.getElementById('team-filter');
        const dateFilterSelect = document.getElementById('date-filter');

        async function fetchMatches() {
            try {
                const response = await fetch('matches.json');
                if (!response.ok) {
                    throw new Error('Impossible de charger les matchs');
                }
                allMatches = await response.json();

                // Débogage : Afficher les matchs chargés
                console.log('Matchs chargés:', allMatches);

                // Générer les options de filtre d'équipe
                const uniqueTeams = [...new Set(allMatches.map(match => match.team))];
                uniqueTeams.sort(); // Trier les équipes alphabétiquement
                uniqueTeams.forEach(team => {
                    const option = document.createElement('option');
                    option.value = team;
                    option.textContent = team;
                    teamFilterSelect.appendChild(option);
                });

                // Générer les options de filtre de date
                const uniqueDates = [...new Set(allMatches.map(match => match.match_date))];
                uniqueDates.sort(); // Trier les dates
                uniqueDates.forEach(date => {
                    const option = document.createElement('option');
                    option.value = date;
                    option.textContent = date;
                    dateFilterSelect.appendChild(option);
                });

                // Afficher tous les matchs initialement
                displayMatches(allMatches);

                // Ajouter les écouteurs d'événement pour le filtrage
                teamFilterSelect.addEventListener('change', filterMatches);
                dateFilterSelect.addEventListener('change', filterMatches);

            } catch (error) {
                console.error('Erreur de chargement des matchs:', error);
            }
        }

        function filterMatches() {
            const selectedTeam = teamFilterSelect.value;
            const selectedDate = dateFilterSelect.value;

            // Filtrer les matchs
            let filteredMatches = allMatches;

            if (selectedTeam) {
                filteredMatches = filteredMatches.filter(match => match.team === selectedTeam);
            }

            if (selectedDate) {
                filteredMatches = filteredMatches.filter(match => match.match_date === selectedDate);
            }

            // Afficher les matchs filtrés
            displayMatches(filteredMatches);
        }

        function displayMatches(matches) {
            const tableBody = document.querySelector('#matches-table tbody');
            tableBody.innerHTML = '';
            const today = new Date();

            // Trier les matchs
            matches.sort((a, b) => {
                if (a.match_date !== b.match_date) {
                    return new Date(a.match_date) - new Date(b.match_date);
                } else {
                    return a.time.localeCompare(b.time);
                }
            });

            matches.forEach(match => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${match.team}</td>
                    <td>${match.opponent}</td>
                    <td>${match.match_date}</td>
                    <td>${match.time}</td>
                    <td>${match.location == 'Domicile' ? '<i class="fas fa-house"></i>' : ''} ${match.location} ${match.location == 'Extérieur' ? '<i class="fas fa-car-side"></i>' : ''}</td>
                    <td>${match.resultat == 'Gagné' ? '<i class="fa-solid fa-face-smile"></i>' : ''} ${match.resultat} ${match.resultat == 'Perdu' ? '<i class="fa-solid fa-face-sad-cry"></i>' : ''}</td>
                `;

                const matchDate = new Date(match.match_date);
                if (matchDate < today) {
                    row.classList.add('grayed-out');
                }

                tableBody.appendChild(row);
            });
        }

        // Lancer le chargement des matchs
        await fetchMatches();
    });
</script>
</body>
</html>
